## 逻辑
1.任意一个策略文件被实例化的时候，都会起一个守护进程t，运行函数StartGui
2.StartGui中实例化Qt类，cls.qtsp = QtGuiSupport()
3.QtGuiSupport的__init__中，用信号槽关联图像对象函数
  self.signal.connect(self.showStrategyWidget)
  self.signalc.connect(self.closeStrategyWidget)
4.showStrategyWidget中，实例化widget
  s.widget = s.widgetClass(s)
  # widgetClass=KLWidget
  # 删除实例后创建同名实例，self.widget为None
5.getGui, closeGui
  self.__class__.qtsp.signal.emit(self)
  self.__class__.qtsp.signalc.emit(self)
  # 将策略实例self传递给4中的s




DemoStrategy2
self.widgetClass = KLWidget
self.widget = None


ctaTemplate
# widgetClass 3次；widget 8次
class QtGuiSupport(QtCore.QObject):
	"""
	支持QT的对象类
	用来开启和关闭KLWidget
	"""
	
	signal = QtCore.Signal(object)
    signalc = QtCore.Signal(object)

	def __init__(self):
		...
		self.signal.connect(self.showStrategyWidget)
		self.signalc.connect(self.closeStrategyWidget)
		...
	
	def showStrategyWidget(self, s):
        try:
            if s.widgetClass is not None:
                if self.widgetDict.get(s.name) is None:
					# 给策略实例的widget赋值
                    s.widget = s.widgetClass(s)
                    self.widgetDict[s.name] = s.widget
                    s.widget.show()
                else:
                    self.widgetDict[s.name].show()
			...
				
	def closeStrategyWidget(self, s):
		if s.widgetClass is not None:
			...
		
		
class KLWidget(QWidget):
    """
	简单交易组件，策略界面的主要类
	实例化的时候需要输入策略的实例
	"""
	 def __init__(self, strategy, parent=None):
	
# qtsp是QtGuiSupport类的实例	
cls.qtsp = QtGuiSupport()


# 开启关闭界面
onStart, onStop 
->  getGui
    closeGui
	
	self.widget.clear()
->  # self将策略实例传给QtGuiSupport中两个函数，从而用来实例化KLWidget
	self.__class__.qtsp.signal.emit(self),
    self.__class__.qtsp.signalc.emit(self)
	
	# self.widget.addBar(data)中的data中的bar和sig,stateData结合mainSigs、subSigs中data其他的部分
	self.bars = []
    self.sigs = []
	# mainSigs+subSigs的数据
    self.stateData = defaultdict(list)
	
	->  for s in (self.strategy.mainSigs + self.strategy.subSigs):
			self.stateData[s].append(data[s])
	
	# 情况K线的对象
    self.uiKLine.clearData()
    self.uiKLine.clearSig()
    self.started = False

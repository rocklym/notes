# -*- coding: UTF-8 -*-
#!usr/bin/env python


模式      可做操作    若文件不存在     是否覆盖
r         只能读         报错            是
r+        可读可写       报错            是
w         只能写         创建            是
w+        可读可写       创建            是
a         只能写         创建        否，追加写
a+        可读可写       创建        否，追加写


               字符串（内存中，Unicode字符）     字节（传输、保存）
python2:          unicode                           str 
python3：          str                              bytes

encode：字符串 ---> 字节   
decode：字节   ---> 字符串 




# encode & decode
python2
encode: unicode ---> str
decode: str ---> unicode



def to_str(bytes_or_str):
    if isinstance(bytes_or_str, bytes):
        value = bytes_or_str.decode('utf-8')
    else:
        value = bytes_or_str
    return value  # Instance of str


def to_bytes(bytes_or_str):
    if isinstance(bytes_or_str, str):
        value = bytes_or_str.encode('utf-8')
    else:
        value = bytes_or_str
    return value  # Instance of bytes

    
Use list(dict, set) comprehension instead of using map or filter.
Use generator expression while encountering big data---用过一轮就不能用了


# 对象转字典
dict((name, getattr(tick, name)) for name in dir(tick) if not name.startswith('__'))


### 索引 ###
# 一维，行列分开
df[:3]
df['a':'c']
df[[True,True,True,False,False,False]] 
df[df['A']>0] # 
df[(df['A']>0) | (df['B']>0)] 
df[(df['A']>0) & (df['C']>0)] 

df['A']
df[['A','B']]

# 二维，先行后列
df.loc['a':'d', :]   #  标签索引
df.loc[:, df.loc['a']>0]  # a行大于0的列

df.iloc[[0, 2, 4], :]  # 整数索引
df.iloc[:, 0:3]

df.ix[0:3, ['A', 'C']]  # 标签、整数混合索引

# 定位单元格
df.at['a', 'A']
df.iat[1, 2]


### 常用函数 ###
# 数据类型转换
df['TradingDay'] = df['TradingDay'].astype(str)

# 筛选
_df = df[~df.TradingDay.isin([trading_day])]   # 不要20191007的数据

# 写文件
_df.to_csv(os.path.join(BASE_PATH, DATA_TYPES[365], day_data_path, csv), index=False)  # 不输出index

# pip加速
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pandas


# generator
text = ['agag', 'bababagag', 'gadgagagaha']
it = (len(x) for x in text)
ti = [len(x) for x in text]

print(it)   # generator expression
<generator object <genexpr> at 0x0000024A63146A98>

print(ti)   # comprehension
[4, 9, 11]

print(next(it))
4
print(next(it))
9   ---一个一个输出



syntax
1.a try statement’s else clause runs when no exception occurs, and a loop’s else clause runs when no break occurs.
2.
def initlog(*args):
...     pass   # Remember to implement this!

3.The defalut value of function is evaluated only once at the point of function definition in the defining scope
4.def f(args, **kwargs)
5.operator：numberical(+, *) > comparision(in, not in) > boolean(not > and > or)
6.comparison:
(1)0 == 0.0
(2)list < string < tuple

data strutcures
1.list：ordered
(1)methods：append(x), extend(L), insert(i, x), remove(x), pop(), index(x), count(x), sort(cmp=None, key=None, reverse=False), reverse()
(2)using lists as stacks:easy and efficient
     using lists as queues:not efficient,use collections.deque
     from collections import deque
     queue = deque([])
     queue.popleft
(3)comprehensions:
     for x in range(10):
          squares.append(x**2)
     squares=[x**2 for x in range(10)]---more concise and readable
     squares=map(lambda x:x**2,range(10))

     [(x, y) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]---mad but amazing

     vec = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
     print [x for element in vec for x in element]---bravo
(5)del：
     del a[2]
     del a[:]
     del a---delete entire variable

2.tuple：ordered,immutable
(1)singleton='hi',---ugly but effective
(2)t=12345,54321,'hello'

3.set：unordered,with no duplicate elements
(1)vec=[1,2,2,3,4,4]
     new_vec=set(vec)---set[(1,2,3,4)]
(2)5 in new_vec---False
(3)a = set('abracadabra') --- set(['a', 'r', 'b', 'c', 'd'])

     b = set('alacazam') ---  set(['a', 'c', 'z', 'm', 'l'])
     a & b     a | b     a - b     a ^ b---set operations

4.dict：unordered,keys are immutable
(1)key() methond returns a list of allthe keys used in the dictionary
(2)dict(('sape', 4139), ('guido', 4127), ('jack', 4098))---{'sape': 4139, 'jack': 4098, 'guido': 4127}
     dict(sape=4139, guido=4127, jack=4098)---when the keys are simple strings
(3)comprehension：{x:x*2 for x in (2,4,6)}

5.looping techniques
(1)enumerate()：index and corresponding value.
     for i, v in enumerate(list)
(2)zip()：to loop over two or more sequences at the same time.
     for x, y in zip(list1, list2)
(3)xrange：more efficient than range.
     xrange(5)---a generator;     list(xrange(5))---[0, 1, 2, 3, 4]
(4)reversed()：reversed(xrange(1, 10, 2))
     sorted()：sorted(set(list))
     iteritems()：for k, v in dict_cav.iteritems()---23 - LeBron James

Functional programming
1.lambda
lambda x: x + n
2.filter()
filter(lambda x: x % 3 == 0 or x % 5 == 0, range(2, 25))
3.map()
map(lambda x: x ** 2, range(11))
map(lambda x, y: x + y, range(8), range(8))---two arguments
4.reduce()
reduce(lambda x, y: x + y, range(1, 11))---sum=55
reduce(lambda x, y: x + y, range(1, 11), 10)---sum=65

Module
1.from app import *---import all names except those beginning with an underscore(_), and it's frowned upon.
2.sys.path is a list of strings that determines the interpreter's search path for modules. You can modify it using standard list operations:sys.path.append('/ufs/guido/lib/python')

Output and Input
1.repr()：is meant to generate representations which can be read by the interpreter. Like str().
2.str(x).rjust()：right-justifies a string in a field of a given width by padding it with spaces on the left. (ljust(),center())
3.str.zfill()：pads a numeric string on the left with zeros.
4.format()：{1:10d}---second variable;width of string is 10;decimal
5.old string formatting：%5.3f---3.142
6.f=open('filename','w')--r+(b),a(append) read and write binary mode,windows need.
f.read()     f.readline()--only return strings
7.seek(offset,from_what)：from_what---0,beginning;1,current;2,end.
8.good practise with:
with open('filename','r') as f:
     read_data=f.read()
f.closed()
9.json
(1)x=json.dumps([1,'good','list'])
(2)f=open('json.txt','w')
     json.dump(x,f)
(3)json.load(f)

Exception
1.A finally clause is always executed before leaving the try statement, whether an exception has occurred or not. When an exception has occurred int the try clause and has not been handled by an except clause, it is re-raised after the finally clause has been executed.

Class
1.top-level：__main__.
2.namespace：The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception that is not handled within the function. Of course, recursive invocations each have their own local namespace.
3.nested scopes：
(1)local names(innermost)->non-local, non-global names->the current module's global names->namespace containing built-in names(outermost).
(2)If no global statement is in effect, assignments to names always go into the innermost scope. Assignments do not copy data, they just bind names to objects.
4.attribute and method：class MyClassx=MyClass()
(1)x.f is a method object, not a function object.
(2)A method object can be stored away and called at a later time.
     xf = x.f
     print xf()
(3)The object is passed as the first argument of the function.
     x.f() is exactly equivalent to MyClass.f(x)
(4)To avoid sharing data, use instance variable.
5.Inheritance：
(1)isinstance(), issubclass()


collections:
1.namedtuple: 可以命名的tuple，Point = namedtuple('Point', ['x', 'y']);
2.deque: 双向队列，有appendleft和popleft；
3.defaultdict: 当key不存在时不返回keyError,dd = defaultdict(lambda: 'N/A');
4.OrderedDict: 按照插入的顺序将key排列，FIFO;
5.Counter: dict的一个子类，当key不存在时不返回keyError而返回数字0，用于统计。



